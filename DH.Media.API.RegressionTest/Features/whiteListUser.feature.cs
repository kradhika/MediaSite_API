// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CurbsideTestProject.Features
{
    using TechTalk.SpecFlow;
    using DH.Curbside.Core.Enterprise.Common;

    [System.CodeDom.Compiler.GeneratedCodeAttribute(Constants.TechTalkSpecFlow, Constants.Version)]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class WhiteListUserFeature
    {

        private static TechTalk.SpecFlow.ITestRunner testRunner;

#line 1 "whiteListUser.feature"
#line hidden

        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo(Constants.Language), Constants.WhiteListUser, null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }

        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null)
                        && (testRunner.FeatureContext.FeatureInfo.Title != Constants.WhiteListUser)))
            {
                global::CurbsideTestProject.Features.WhiteListUserFeature.FeatureSetup(null);
            }
        }

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }

        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }

        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Get all WhiteListusers Count")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "whiteListUser")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("mytag")]
        public virtual void GetAllWhiteListusersCount()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get all WhiteListusers Count", new string[] {
                        "mytag"});
#line 5
            this.ScenarioSetup(scenarioInfo);
#line 6
            testRunner.Given(Constants.AccessUrlStmt, ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), Constants.Given);
#line 7
            testRunner.When(Constants.GetUsersStmt, ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), Constants.When);
#line 8
            testRunner.Then(Constants.SeeUsersCntStmt, ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), Constants.Then);
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
